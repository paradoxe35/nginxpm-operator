stages:
  - manifests-dist
  - release
  - build-images
  # Uncomment the following stage to update the README.md with the new tag
  # - update_tag

# Create artifacts

manifests-dist:
  image: golang:1.23
  stage: manifests-dist
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - apt-get update && apt-get install -y make
    - make kustomize
    - make build-installer IMG=$CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
  artifacts:
    name: $CI_COMMIT_TAG
    expire_in: never
    paths:
      - dist/install.yaml

############## Create release #####################

release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  needs:
    - job: manifests-dist
      artifacts: true
  script:
    - echo "Create Release $TAG"
    - echo $CI_JOB_ID
  rules:
    - if: $CI_COMMIT_TAG
  artifacts:
    name: $CI_COMMIT_TAG
    expire_in: never
    paths:
      - dist/install.yaml
  release:
    assets:
      links:
        - name: install.yaml
          url: $CI_JOB_URL/artifacts/raw/dist/install.yaml
    name: "$CI_COMMIT_TAG"
    tag_name: "$CI_COMMIT_TAG"
    description: "$CI_COMMIT_TAG_MESSAGE"

# ############# Build docker images #########################

build-images:
  image: docker:27
  stage: build-images
  needs: [release]
  services:
    - docker:27-dind
  rules:
    - if: $CI_COMMIT_TAG

  before_script:
    - apk update && apk add make bash --no-cache
    - echo "user:$CI_REGISTRY_USER -- pwd:$CI_REGISTRY_PASSWORD -- registry:$CI_REGISTRY"
    - echo "$CI_REGISTRY_PASSWORD" | docker login --username $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - echo "$CI_REGISTRY_IMAGE"
    - echo "$CI_COMMIT_TAG"
    - echo "$CI_COMMIT_TAG_MESSAGE"
  script:
    - echo "Build Images, and create release"
    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG .
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
    - docker push $CI_REGISTRY_IMAGE:latest

# Update README.md

update_readme:
  stage: update_tag
  image: alpine:latest
  rules:
    - if: $CI_COMMIT_TAG
  needs:
    - manifests-dist
    - release
    - build-images
  script:
    - apk add --no-cache git
    # Fetch all tags and checkout the newly created tag
    - git fetch --tags

    # Extract the latest and previous tags
    - export NEW_TAG=$(echo $CI_COMMIT_TAG)
    - export OLD_TAG=$(git describe --tags --abbrev=0 $(git rev-list --tags --skip=1 --max-count=1))

    # Check if OLD_TAG was found, and proceed if it exists
    - if [ -z "$OLD_TAG" ]; then echo "No previous tag found. Skipping the update."; exit 0; fi

    # Use sed to replace the old tag with the new tag in README.md
    - sed -i "s/$OLD_TAG/$NEW_TAG/g" README.md

    # Set git user info for committing
    - git config --global user.email "ci-bot@nginxpm-operator.io"
    - git config --global user.name "CI Bot"

    # Commit and push the changes back to the repo
    - git add README.md
    - git commit -m "Update README.md $OLD_TAG â†’ $NEW_TAG"
    - git push "https://gitlab-ci-token:${ACCESS_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git" HEAD:main
